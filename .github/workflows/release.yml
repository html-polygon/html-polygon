name: Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    # checkout
    - name: Checkout repository code
      uses: actions/checkout@v3

    # install
    - name: Setup PNPM
      if: 
      uses: pnpm/action-setup@v2
      with:
        version: 8.6.5
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version-file: '.nvmrc'
        cache: 'pnpm'
        registry-url: 'https://registry.npmjs.org'
    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    # get latest version number
    - name: Install semver package
      run: pnpm add --workspace-root semver
    - name: Retrieve the latest release and current package versions
      id: get-releases
      uses: actions/github-script@v6
      with:
        script: |
          const semver = require('semver')
          
          const getLatestReleaseVersion = async () => {
            let latestVersion = 'v0.0.0'

            try {
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
              console.log(latestRelease)
              latestVersion =
                typeof latestRelease === 'undefined' ||
                typeof latestRelease.data === 'undefined'
                  ? 'v0.0.0'
                  : `v${semver.clean(latestRelease.data.tag_name)}`

              console.info(`Found latest release version: ${latestVersion}`)
            } catch (e) {
              console.info(
                'Could not evaluate latest release version, using v0.0.0'
              )
            } finally {
              return latestVersion
            }
          }

          const getPackageVersion = async (path = 'package.json') => {
            const safePath = path.trim()

            let packageVersion = 'v0.0.0'

            try {
              console.info(`Getting version number from ${safePath}`)

              const packageJsonRecord = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: safePath,
                ref: context.ref,
              })

              const packageJson =
                typeof packageJsonRecord === 'undefined' ||
                typeof packageJsonRecord.data === 'undefined'
                  ? '{ "version": "0.0.0" }'
                  : Buffer
                      .from(packageJsonRecord.data.content, 'base64')
                      .toString()

              const packageObject = JSON.parse(packageJson)
              packageVersion = `v${semver.clean(packageObject.version)}`
              console.info(`Found current package version: ${packageVersion}`)
            } catch (e) {
              console.info(
                'Could not evaluate current package version, using v0.0.0'
              )
            } finally {
              return packageVersion
            }
          }

          const latestReleaseVersion = await getLatestReleaseVersion()
          const workspacePackageVersion = await getPackageVersion()
          const packageNames = ['core', 'react', 'vue']
          const packageData = await Promise.all(packageNames.map(async (packageName) => {
            const path = `packages/${packageName}/package.json`
            return {
              name: packageName,
              path,
              version: await getPackageVersion(path),
            }
          }))
          packageData.forEach(({ name, path, version }) => {
            if (!semver.eq(workspacePackageVersion, version)) {
              throw new Error(`Package "${name}" at ${path} has a different version to the workspace.`)
            }
          })

          return {
            package: workspacePackageVersion,
            latest: latestReleaseVersion,
            latestIsNew: semver.gt(workspacePackageVersion, latestReleaseVersion)
          }
    - name: Uninstall semver package 
      run: git restore . && pnpm install --frozen-lockfile

    # release to npm
    - name: Release Core to NPM
      if: ${{ fromJSON(steps.get-releases.outputs.result).latestIsNew }}
      run: pnpm --dir packages/core run release
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}
    - name: Release React to NPM
      if: ${{ fromJSON(steps.get-releases.outputs.result).latestIsNew }}
      run: pnpm --dir packages/react run release
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}
    - name: Release Vue 3 to NPM
      if: ${{ fromJSON(steps.get-releases.outputs.result).latestIsNew }}
      run: pnpm --dir packages/vue run release
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}

    # tag release in github
    - name: Tag release in GitHub
      if: ${{ fromJSON(steps.get-releases.outputs.result).latestIsNew }}
      uses: actions/github-script@v6
      env:
        RELEASE_TAG_NAME: ${{ fromJSON(steps.get-releases.outputs.result).package }}
      with:
        result-encoding: string
        script: |
          const { RELEASE_TAG_NAME: tag_name } = process.env
          await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name,
            target_commitish: context.sha,
            name: tag_name,
          })
          console.info(`Created release ${tag_name}`)
